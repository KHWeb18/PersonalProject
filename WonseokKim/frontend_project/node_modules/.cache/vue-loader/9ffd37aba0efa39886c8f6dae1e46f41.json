{"remainingRequest":"/Users/wonseokkim/java_work/LectureContents/javascript/WonseokKim/proj_frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/wonseokkim/java_work/LectureContents/javascript/WonseokKim/proj_frontend/src/views/KakaoMap.vue?vue&type=style&index=0&id=8395315a&scoped=true&lang=css&","dependencies":[{"path":"/Users/wonseokkim/java_work/LectureContents/javascript/WonseokKim/proj_frontend/src/views/KakaoMap.vue","mtime":1631553927864},{"path":"/Users/wonseokkim/java_work/LectureContents/javascript/WonseokKim/proj_frontend/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/wonseokkim/java_work/LectureContents/javascript/WonseokKim/proj_frontend/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/wonseokkim/java_work/LectureContents/javascript/WonseokKim/proj_frontend/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/wonseokkim/java_work/LectureContents/javascript/WonseokKim/proj_frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/wonseokkim/java_work/LectureContents/javascript/WonseokKim/proj_frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKI21hcCB7CiAgd2lkdGg6IDQwMHB4OwogIGhlaWdodDogNDAwcHg7Cn0KCi5idXR0b24tZ3JvdXAgewogIG1hcmdpbjogMTBweCAwcHg7Cn0KCmJ1dHRvbiB7CiAgbWFyZ2luOiAwIDNweDsKfQo="},{"version":3,"sources":["KakaoMap.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqHA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA","file":"KakaoMap.vue","sourceRoot":"src/views","sourcesContent":["<template>\n  <div>\n    <div id=\"map\"></div>\n    <div class=\"button-group\">\n      <button @click=\"changeSize(0)\">Hide</button>\n      <button @click=\"changeSize(400)\">show</button>\n      <button @click=\"displayMarker(markerPositions1)\">marker set 1</button>\n      <button @click=\"displayMarker(markerPositions2)\">marker set 2</button>\n      <button @click=\"displayMarker([])\">marker set 3 (empty)</button>\n      <button @click=\"displayInfoWindow\">infowindow</button>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: \"KakaoMap\",\n  data() {\n    return {\n      map: null,\n      markerPositions1: [\n        [33.452278, 126.567803],\n        [33.452671, 126.574792],\n        [33.451744, 126.572441],\n      ],\n      markerPositions2: [\n        [37.499590490909185, 127.0263723554437],\n        [37.499427948430814, 127.02794423197847],\n        [37.498553760499505, 127.02882598822454],\n        [37.497625593121384, 127.02935713582038],\n        [37.49629291770947, 127.02587362608637],\n        [37.49754540521486, 127.02546694890695],\n        [37.49646391248451, 127.02675574250912],\n      ],\n      markers: [],\n      infowindow: null,\n    };\n  },\n  mounted() {\n    if (window.kakao && window.kakao.maps) {\n      this.initMap();\n    } else {\n      const script = document.createElement(\"script\");\n      /* global kakao */\n      script.onload = () => kakao.maps.load(this.initMap);\n      script.src =\n        \"//dapi.kakao.com/v2/maps/sdk.js?autoload=false&appkey=915cffed372954b7b44804ed422b9cf0\";\n      document.head.appendChild(script);\n    }\n  },\n  methods: {\n    initMap() {\n      const container = document.getElementById(\"map\");\n      const options = {\n        center: new kakao.maps.LatLng(33.450701, 126.570667),\n        level: 5,\n      };\n      this.map = new kakao.maps.Map(container, options);\n    },\n    changeSize(size) {\n      const container = document.getElementById(\"map\");\n      container.style.width = `${size}px`;\n      container.style.height = `${size}px`;\n      this.map.relayout();\n    },\n    displayMarker(markerPositions) {\n      if (this.markers.length > 0) {\n        this.markers.forEach((marker) => marker.setMap(null));\n      }\n\n      const positions = markerPositions.map(\n        (position) => new kakao.maps.LatLng(...position)\n      );\n\n      if (positions.length > 0) {\n        this.markers = positions.map(\n          (position) =>\n            new kakao.maps.Marker({\n              map: this.map,\n              position,\n            })\n        );\n\n        const bounds = positions.reduce(\n          (bounds, latlng) => bounds.extend(latlng),\n          new kakao.maps.LatLngBounds()\n        );\n\n        this.map.setBounds(bounds);\n      }\n    },\n    displayInfoWindow() {\n      if (this.infowindow && this.infowindow.getMap()) {\n        //이미 생성한 인포윈도우가 있기 때문에 지도 중심좌표를 인포윈도우 좌표로 이동시킨다.\n        this.map.setCenter(this.infowindow.getPosition());\n        return;\n      }\n\n      var iwContent = '<div style=\"padding:5px;\">Hello World!</div>', // 인포윈도우에 표출될 내용으로 HTML 문자열이나 document element가 가능합니다\n        iwPosition = new kakao.maps.LatLng(33.450701, 126.570667), //인포윈도우 표시 위치입니다\n        iwRemoveable = true; // removeable 속성을 ture 로 설정하면 인포윈도우를 닫을 수 있는 x버튼이 표시됩니다\n\n      this.infowindow = new kakao.maps.InfoWindow({\n        map: this.map, // 인포윈도우가 표시될 지도\n        position: iwPosition,\n        content: iwContent,\n        removable: iwRemoveable,\n      });\n\n      this.map.setCenter(iwPosition);\n    },\n  },\n};\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped>\n#map {\n  width: 400px;\n  height: 400px;\n}\n\n.button-group {\n  margin: 10px 0px;\n}\n\nbutton {\n  margin: 0 3px;\n}\n</style>\n"]}]}